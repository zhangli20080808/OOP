var hxy;
(function (hxy) {
    var JsGame;
    (function (JsGame) {
        var GameManager = (function () {
            function GameManager(spriteManager) {
                this._spriteManager = spriteManager;
            }
            GameManager.prototype.Initialize = function () {
                var _this = this;
                this._player = this._spriteManager.AddAPlayer();
                for (var i = 0; i < 5; i++) {
                    this._spriteManager.AddAEnemy().Fire();
                }
                setInterval(function () { return _this.ThreadRun(); }, 20);
                setInterval(function () { return _this.UpdateExplosionFrame(); }, 150);
                document.addEventListener("keydown", function (e) { return _this.KeyDown(e); });
                document.addEventListener("keyup", function (e) { return _this.KeyUp(e); });
            };
            GameManager.prototype.ThreadRun = function () {
                for (var i = 0; i < this._spriteManager.allSprites.length; i++) {
                    var sprite = this._spriteManager.allSprites[i];
                    sprite.Move();
                    this.DealCollideSprites(sprite);
                    //change enemy direction by a random time span
                    if (Math.random() * 100 < 1 && sprite.collisionType == 2 /* EnemyTank */) {
                        sprite.ChangeARandomDirection();
                    }
                }
            };
            GameManager.prototype.UpdateExplosionFrame = function () {
                this._spriteManager.explosions.forEach(function (explosion) {
                    if (explosion.isVisible) {
                        explosion.UpdateFrame();
                    }
                });
            };
            GameManager.prototype.DealCollideSprites = function (sprite) {
                //Don't detect a collision generated by a explosion
                if (sprite.collisionType == 16 /* Explosion */) {
                    return;
                }
                var allSprites = this._spriteManager.allSprites;
                for (var j = 0; j < allSprites.length; j++) {
                    var target = allSprites[j];
                    //Is Need To Detect Collision between sprite and target
                    if (this.IsNeedToDetectCollision(sprite, target)) {
                        if (sprite.IsCollided(target)) {
                            sprite.OnCollided(target.rectangle, target.collisionType, true);
                            target.OnCollided(sprite.rectangle, sprite.collisionType, false);
                            //need return!
                            //otherwise occurs the same type collision
                            return;
                        }
                    }
                }
            };
            GameManager.prototype.IsNeedToDetectCollision = function (sprite1, sprite2) {
                if (sprite1 == sprite2) {
                    return false;
                }
                if (sprite1.collisionType == 16 /* Explosion */ || sprite2.collisionType == 16 /* Explosion */) {
                    return false;
                }
                if (sprite1 instanceof JsGame.ConcreteSprite.Shell && sprite1.myTank == sprite2) {
                    return false;
                }
                if (sprite2 instanceof JsGame.ConcreteSprite.Shell && sprite2.myTank == sprite1) {
                    return false;
                }
                return true;
            };
            GameManager.prototype.KeyDown = function (e) {
                switch (e.keyCode) {
                    case hxy.KeyCodes.left:
                        this._player.direction = 4 /* Left */;
                        this._player.isActive = true;
                        break;
                    case hxy.KeyCodes.up:
                        this._player.direction = 1 /* Up */;
                        this._player.isActive = true;
                        break;
                    case hxy.KeyCodes.right:
                        this._player.direction = 8 /* Right */;
                        this._player.isActive = true;
                        break;
                    case hxy.KeyCodes.down:
                        this._player.direction = 2 /* Down */;
                        this._player.isActive = true;
                        break;
                }
            };
            GameManager.prototype.KeyUp = function (e) {
                this._player.isActive = false;
                switch (e.keyCode) {
                    case hxy.KeyCodes.space:
                        this._player.Fire();
                        break;
                }
            };
            return GameManager;
        })();
        JsGame.GameManager = GameManager;
    })(JsGame = hxy.JsGame || (hxy.JsGame = {}));
})(hxy || (hxy = {}));
//# sourceMappingURL=GameManager.js.map