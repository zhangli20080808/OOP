module hxy.JsGame {
    export interface CollidedEventHandler {
        (initiativeSprite: Common.SpriteBase, passiveSprite: Common.SpriteBase): void;
    }

    //专门处理碰撞的类型
    export class CollisionManager {
        private _spriteManager: SpriteManager;
        private _collidedHandlers = new EventList<CollidedEventHandler>();
        private _enemyDeadHandlers = new EventList<Action>();

        //无敌
        isPlayerInvincible: boolean;

        constructor(spriteManager: SpriteManager) {
            this._spriteManager = spriteManager;
        }

        private onCollided(initiativeSprite: Common.SpriteBase, passiveSprite: Common.SpriteBase) {
            this._collidedHandlers.fire(t => t(initiativeSprite, passiveSprite));
        }
        addOnCollided(handler: CollidedEventHandler) {
            this._collidedHandlers.add(handler);
        }

        dealCollideSprites(sprite: Common.SpriteBase) {
            //Don't detect a collision generated by a explosion
            if (sprite instanceof ConcreteSprite.Explosion) {
                return;
            }

            var allSprites = this._spriteManager.allSprites;

            for (var j = 0; j < allSprites.length; j++) {
                var target = allSprites[j];
                //Is Need To Detect Collision between sprite and target
                if (this.isNeedToDetectCollision(sprite, target)) {
                    if (sprite.isCollided(target)) {
                        this.dealCollision(sprite, target, true);
                        this.dealCollision(target, sprite, false);

                        this.onCollided(sprite, target);
                        //need return!
                        //otherwise occurs the same type collision
                        return;
                    }
                }
            }
        }

        private isNeedToDetectCollision(sprite1: Common.SpriteBase, sprite2: Common.SpriteBase) {
            if (sprite1 == sprite2) {
                return false;
            }
            if (sprite1 instanceof ConcreteSprite.Explosion ||
                sprite2 instanceof ConcreteSprite.Explosion) {
                return false;
            }

            //刚发射导弹时，坦克会撞上自己的导弹。
            if (sprite1 instanceof ConcreteSprite.Shell && sprite1.ownerTank == sprite2) {
                return false;
            }
            if (sprite2 instanceof ConcreteSprite.Shell && sprite2.ownerTank == sprite1) {
                return false;
            }
            return true;
        }

        //isInitiative: 是否主动碰撞上对方
        private dealCollision(sprite: Common.SpriteBase, target: Common.SpriteBase, isInitiative: boolean) {
            if (sprite instanceof ConcreteSprite.TankBase) {
                this.dealCollision_Tank(sprite, target, isInitiative);

                if (sprite instanceof ConcreteSprite.PlayerTank) {
                    this.dealCollision_Player(sprite, target, isInitiative);
                }
                else if (sprite instanceof ConcreteSprite.EnemyTank) {
                    this.dealCollision_Enemy(sprite, target, isInitiative);
                }
            }
            else if (sprite instanceof ConcreteSprite.Shell) {
                this.dealCollision_Shell(sprite, target, isInitiative);
            }
        }

        private dealCollision_Tank(tank: ConcreteSprite.TankBase, target: Common.SpriteBase, isInitiative: boolean) {
            //collide another tank
            if (target instanceof ConcreteSprite.TankBase) {
                if (isInitiative) {
                    tank.farAwayFrom(target.rectangle);
                }
            }
            else if (target instanceof ConcreteSprite.Barrier) {
                tank.farAwayFrom(target.rectangle);
            }
        }

        private dealCollision_Player(player: ConcreteSprite.PlayerTank, target: Common.SpriteBase, isInitiative: boolean) {
            //collide a shell of enemy
            if (target instanceof ConcreteSprite.Shell && !target.isPlayerShell) {
                if (!this.isPlayerInvincible) {
                    this._spriteManager.kill(player);
                    this._spriteManager.bombAt(player);
                    alert("你被击中了，游戏结束。");
                }
            }
        }

        private dealCollision_Enemy(enemy: ConcreteSprite.EnemyTank, target: Common.SpriteBase, isInitiative: boolean) {
            //collide a shell of player
            if (target instanceof ConcreteSprite.Shell && target.isPlayerShell) {
                this._spriteManager.kill(enemy);
                this._spriteManager.bombAt(enemy);

                this._enemyDeadHandlers.fire(t => t());
            }
        }
        addOnEnemyDead(handler: () => void) {
            this._enemyDeadHandlers.add(handler);
        }

        private dealCollision_Shell(shell: ConcreteSprite.Shell, target: Common.SpriteBase, isInitiative: boolean) {
            if (shell.isPlayerShell && target instanceof ConcreteSprite.EnemyTank ||
                !shell.isPlayerShell && target instanceof ConcreteSprite.PlayerTank
                ) {
                this._spriteManager.kill(shell);
                this._spriteManager.autoFireIfEnemy(shell);
            }
            else if (target instanceof ConcreteSprite.Shell) {
                this._spriteManager.kill(shell);
                this._spriteManager.autoFireIfEnemy(shell);
                this._spriteManager.bombAt(shell);
            }
            else if (target instanceof ConcreteSprite.Barrier) {
                this._spriteManager.kill(shell);
                this._spriteManager.autoFireIfEnemy(shell);
                this._spriteManager.bombAt(shell);
            }
        }
    }
}