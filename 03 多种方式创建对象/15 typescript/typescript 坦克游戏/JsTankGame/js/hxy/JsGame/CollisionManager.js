var hxy;
(function (hxy) {
    var JsGame;
    (function (JsGame) {
        //专门处理碰撞的类型
        var CollisionManager = (function () {
            function CollisionManager(spriteManager) {
                this._collidedHandlers = new hxy.EventList();
                this._enemyDeadHandlers = new hxy.EventList();
                this._spriteManager = spriteManager;
            }
            CollisionManager.prototype.onCollided = function (initiativeSprite, passiveSprite) {
                this._collidedHandlers.fire(function (t) { return t(initiativeSprite, passiveSprite); });
            };
            CollisionManager.prototype.addOnCollided = function (handler) {
                this._collidedHandlers.add(handler);
            };
            CollisionManager.prototype.dealCollideSprites = function (sprite) {
                //Don't detect a collision generated by a explosion
                if (sprite instanceof JsGame.ConcreteSprite.Explosion) {
                    return;
                }
                var allSprites = this._spriteManager.allSprites;
                for (var j = 0; j < allSprites.length; j++) {
                    var target = allSprites[j];
                    //Is Need To Detect Collision between sprite and target
                    if (this.isNeedToDetectCollision(sprite, target)) {
                        if (sprite.isCollided(target)) {
                            this.dealCollision(sprite, target, true);
                            this.dealCollision(target, sprite, false);
                            this.onCollided(sprite, target);
                            //need return!
                            //otherwise occurs the same type collision
                            return;
                        }
                    }
                }
            };
            CollisionManager.prototype.isNeedToDetectCollision = function (sprite1, sprite2) {
                if (sprite1 == sprite2) {
                    return false;
                }
                if (sprite1 instanceof JsGame.ConcreteSprite.Explosion || sprite2 instanceof JsGame.ConcreteSprite.Explosion) {
                    return false;
                }
                //刚发射导弹时，坦克会撞上自己的导弹。
                if (sprite1 instanceof JsGame.ConcreteSprite.Shell && sprite1.ownerTank == sprite2) {
                    return false;
                }
                if (sprite2 instanceof JsGame.ConcreteSprite.Shell && sprite2.ownerTank == sprite1) {
                    return false;
                }
                return true;
            };
            //isInitiative: 是否主动碰撞上对方
            CollisionManager.prototype.dealCollision = function (sprite, target, isInitiative) {
                if (sprite instanceof JsGame.ConcreteSprite.TankBase) {
                    this.dealCollision_Tank(sprite, target, isInitiative);
                    if (sprite instanceof JsGame.ConcreteSprite.PlayerTank) {
                        this.dealCollision_Player(sprite, target, isInitiative);
                    }
                    else if (sprite instanceof JsGame.ConcreteSprite.EnemyTank) {
                        this.dealCollision_Enemy(sprite, target, isInitiative);
                    }
                }
                else if (sprite instanceof JsGame.ConcreteSprite.Shell) {
                    this.dealCollision_Shell(sprite, target, isInitiative);
                }
            };
            CollisionManager.prototype.dealCollision_Tank = function (tank, target, isInitiative) {
                //collide another tank
                if (target instanceof JsGame.ConcreteSprite.TankBase) {
                    if (isInitiative) {
                        tank.farAwayFrom(target.rectangle);
                    }
                }
                else if (target instanceof JsGame.ConcreteSprite.Barrier) {
                    tank.farAwayFrom(target.rectangle);
                }
            };
            CollisionManager.prototype.dealCollision_Player = function (player, target, isInitiative) {
                //collide a shell of enemy
                if (target instanceof JsGame.ConcreteSprite.Shell && !target.isPlayerShell) {
                    if (!this.isPlayerInvincible) {
                        this._spriteManager.kill(player);
                        this._spriteManager.bombAt(player);
                        alert("你被击中了，游戏结束。");
                    }
                }
            };
            CollisionManager.prototype.dealCollision_Enemy = function (enemy, target, isInitiative) {
                //collide a shell of player
                if (target instanceof JsGame.ConcreteSprite.Shell && target.isPlayerShell) {
                    this._spriteManager.kill(enemy);
                    this._spriteManager.bombAt(enemy);
                    this._enemyDeadHandlers.fire(function (t) { return t(); });
                }
            };
            CollisionManager.prototype.addOnEnemyDead = function (handler) {
                this._enemyDeadHandlers.add(handler);
            };
            CollisionManager.prototype.dealCollision_Shell = function (shell, target, isInitiative) {
                if (shell.isPlayerShell && target instanceof JsGame.ConcreteSprite.EnemyTank || !shell.isPlayerShell && target instanceof JsGame.ConcreteSprite.PlayerTank) {
                    this._spriteManager.kill(shell);
                    this._spriteManager.autoFireIfEnemy(shell);
                }
                else if (target instanceof JsGame.ConcreteSprite.Shell) {
                    this._spriteManager.kill(shell);
                    this._spriteManager.autoFireIfEnemy(shell);
                    this._spriteManager.bombAt(shell);
                }
                else if (target instanceof JsGame.ConcreteSprite.Barrier) {
                    this._spriteManager.kill(shell);
                    this._spriteManager.autoFireIfEnemy(shell);
                    this._spriteManager.bombAt(shell);
                }
            };
            return CollisionManager;
        })();
        JsGame.CollisionManager = CollisionManager;
    })(JsGame = hxy.JsGame || (hxy.JsGame = {}));
})(hxy || (hxy = {}));
//# sourceMappingURL=CollisionManager.js.map