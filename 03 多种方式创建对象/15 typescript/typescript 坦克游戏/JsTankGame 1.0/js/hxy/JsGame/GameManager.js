/// <reference name="MicrosoftAjax.js"/>

Type.registerNamespace("hxy.JsGame");

hxy.JsGame.GameManager = function(spriteManager) {
    this._spriteManager = spriteManager;
    this._player = null;
}

hxy.JsGame.GameManager.prototype = {
    Initialize: function() {
        this._player = this._spriteManager.AddAPlayer();
        for(var i = 0; i < 5; i++){
            this._spriteManager.AddAEnemy().Fire();
        }
        setInterval(Function.createDelegate(this, this.ThreadRun), 20);
        setInterval(Function.createDelegate(this, this.UpdateExplosionFrame), 150);
    },
    ThreadRun: function(){
        for(var i = 0; i < this._spriteManager.get_allSprites().length; i++){
            var sprite = this._spriteManager.get_allSprites()[i];
            sprite.Move();
            
            this.DealCollideSprites(sprite);
            
            //change enemy direction by a random time span
            if(Math.random() * 100 < 1 &&
                sprite.get_collisionType() == hxy.JsGame.Enum.CollisionType.EnemyTank){
                sprite.ChangeARandomDirection();
            }
        }
    },
    UpdateExplosionFrame: function(){
        var update = function(explosion){
            if(explosion.get_isVisible()){
                explosion.UpdateFrame();
            }
        };
        Array.forEach(this._spriteManager.get_explosions(), update);
    },
    DealCollideSprites: function(sprite){
        //Don't detect a collision generated by a explosion
        if (sprite.get_collisionType() == hxy.JsGame.Enum.CollisionType.Explosion) {
            return;
        }
        var allSprites = this._spriteManager.get_allSprites();

        for (var j = 0; j < allSprites.length; j++) {
            var target = allSprites[j];
            //Is Need To Detect Collision between sprite and target
            if (this.IsNeedToDetectCollision(sprite, target)) {
                if (sprite.IsCollided(target)) {
                    sprite.OnCollided(target.get_myRectangle(), target.get_collisionType(), true);
                    target.OnCollided(sprite.get_myRectangle(), sprite.get_collisionType(), false);
                    //need return!
                    //otherwise occurs the same type collision
                    return;
                }
            }
        }
    },
    IsNeedToDetectCollision: function(sprite1, sprite2){
        if(sprite1 == sprite2){
            return false;
        }
        if(sprite1.get_collisionType() == hxy.JsGame.Enum.CollisionType.Explosion ||
            sprite2.get_collisionType() == hxy.JsGame.Enum.CollisionType.Explosion){
            return false;
        }
        if ((sprite1.get_collisionType() == hxy.JsGame.Enum.CollisionType.PlayerShell ||
            sprite1.get_collisionType() == hxy.JsGame.Enum.CollisionType.EnemyShell) &&
            sprite1.get_myTank() == sprite2) {
            return false;
        }
        if ((sprite2.get_collisionType() == hxy.JsGame.Enum.CollisionType.PlayerShell ||
            sprite2.get_collisionType() == hxy.JsGame.Enum.CollisionType.EnemyShell) &&
            sprite2.get_myTank() == sprite1) {
          return false;
        }
        return true;
    },
    KeyDown: function(e){
        switch(e.keyCode)
        {
            case Sys.UI.Key.left://left
                this._player.set_direction(hxy.JsGame.Enum.Direction.Left);
                this._player.set_isActive(true);
                break;
            case Sys.UI.Key.up://up
                this._player.set_direction(hxy.JsGame.Enum.Direction.Up);
                this._player.set_isActive(true);
                break;
            case Sys.UI.Key.right://right
                this._player.set_direction(hxy.JsGame.Enum.Direction.Right);
                this._player.set_isActive(true);
                break;
            case Sys.UI.Key.down://down
                this._player.set_direction(hxy.JsGame.Enum.Direction.Down);
                this._player.set_isActive(true);
                break;
        }
    },
    KeyUp: function(e){
        this._player.set_isActive(false);
        switch(e.keyCode)
        {
            case Sys.UI.Key.space://space
                this._player.Fire();
                break;
        }
    }
}
hxy.JsGame.GameManager.registerClass('hxy.JsGame.GameManager');

if (typeof(Sys) !== 'undefined') Sys.Application.notifyScriptLoaded();
